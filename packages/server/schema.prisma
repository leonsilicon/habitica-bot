datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

generator client {
  provider = "prisma-client-js"
}

model AppUser {
  id String @id

  discordUserId String @unique

  habiticaUser   HabiticaUser? @relation("habiticaUser")
  habiticaUserId String        @unique

  // Whether the user's tasks are public (default false)
  areTasksPublic Boolean @default(false)

  integrations      Integration[]
  linearIntegration LinearIntegration?
}

model HabiticaUser {
  id String @unique

  appUser   AppUser @relation(name: "habiticaUser", fields: [appUserId], references: [id], onDelete: Cascade)
  appUserId String  @unique

  apiToken String
  name     String
  username String

  avatar HabiticaUserAvatar? @relation("habiticaUserAvatar")
}

model HabiticaUserAvatar {
  habiticaUser   HabiticaUser @relation(name: "habiticaUserAvatar", fields: [habiticaUserId], references: [id], onDelete: Cascade)
  habiticaUserId String       @unique

  base64Data String
  isAnimated Boolean
}

model Integration {
  appUser   AppUser @relation(fields: [appUserId], references: [id], onDelete: Cascade)
  appUserId String  @unique

  linearIntegration LinearIntegration?
}

model LinearIntegration {
  integration Integration? @relation(fields: [appUserId], references: [appUserId], onDelete: Cascade)

  appUser   AppUser @relation(fields: [appUserId], references: [id], onDelete: Cascade)
  appUserId String  @unique

  apiKey               String
  webhookSigningSecret String
  linearUserId         String @unique
}
